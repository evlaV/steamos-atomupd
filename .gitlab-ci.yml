# Copyright 2021-2024 Collabora Ltd
# SPDX-License-Identifier: MIT

workflow:
    rules:
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH

stages:
    - lint
    - test
    - docker-prepare
    - docker-build

default:
  tags:
    - x86_64-linux-kvm-docker

.test_template:
    stage: test
    needs: []
    tags:
        - x86_64-linux-kvm-docker
    script:
        - meson setup -Dtests_coverage=${COVERAGE:-false} _build/tests
        - meson compile -C _build/tests || ninja -C _build/tests
        - meson test -C _build/tests --verbose

    artifacts:
        paths:
            - _build/tests/meson-logs/*.txt
        when: always

.test_debian_template:
    extends: .test_template
    before_script:
    # Desync requires Go 1.22+. We need to download it from the backports repo.
    - echo "deb http://deb.debian.org/debian bookworm-backports main" > /etc/apt/sources.list.d/backports.list
    - apt-get update
    - apt-get install -y meson python3-flask python3-semantic-version python3-setuptools git
    - apt-get -t bookworm-backports install -y golang
    - apt-get install -y rauc squashfs-tools
    - ./build/build-deps.sh

test:debian-12:
    extends: .test_debian_template
    image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian:bookworm-slim

test:jupiter:
    extends: .test_template
    image: registry.gitlab.steamos.cloud/steam/steamos-docker-images/jupiter-main/base-devel:latest
    variables:
      COVERAGE: "true"
    before_script:
        - pacman -Syu --needed --noconfirm --noprogressbar
          desync git json-glib meson python-coverage python-flask
          python-semantic-version python-setuptools python-pyinotify rauc squashfs-tools
    after_script:
      - coverage report -m
      - coverage xml -o _build/tests/meson-logs/coverage.xml
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
    artifacts:
      paths:
        - _build/tests/meson-logs
      when: always
      reports:
        coverage_report:
          coverage_format: cobertura
          path: _build/tests/meson-logs/coverage.xml


.lint_template:
    stage: lint
    needs: [ ]
    image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/archlinux:base-devel
    before_script:
        - pacman -Syu --needed --noconfirm --noprogressbar
          python-flask python-semantic-version python-setuptools python-pyinotify python-pylint mypy

lint:pylint:
    extends: .lint_template
    script:
        - pylint steamosatomupd

lint:mypy:
    extends: .lint_template
    script:
        - mypy steamosatomupd

# We can't do this in the docker step because the kaniko executor
# doesn't have git, therefore no `git describe`
prepare:
    stage: docker-prepare
    image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian:bookworm-slim
    script:
        - ci/prepare.sh > VERSION
    artifacts:
        paths:
            - VERSION

docker:
    stage: docker-build
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    needs:
        - prepare
    script:
        - sh ci/docker.sh

# vim:set sw=4 sts=4 et:
